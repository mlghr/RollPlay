{"version":3,"sources":["hooks/useLocalStorage.js","auth/UserContext.js","routes-nav/Navigation.js","homepage/Homepage.js","shared/Alert.js","auth/LoginForm.js","api/api.js","hooks/useTimedMessage.js","profiles/ProfileForm.js","auth/SignupForm.js","routes-nav/PrivateRoute.js","match/MatchCard.js","shared/LoadingSpinner.js","match/MatchCarousel.js","routes-nav/Routes.js","App.js","serviceWorker.js","index.js"],"names":["useLocalStorage","key","firstValue","initialValue","localStorage","getItem","useState","item","setItem","useEffect","console","debug","removeItem","UserContext","React","createContext","Navigation","logout","currentUser","useContext","className","to","onClick","Homepage","firstName","username","Alert","type","messages","role","map","error","LoginForm","login","history","useHistory","password","formData","setFormData","formErrors","setFormErrors","handleSubmit","evt","a","preventDefault","result","success","push","errors","handleChange","target","name","value","l","onSubmit","onChange","autoComplete","required","length","BASE_URL","process","RollplayApi","endpoint","data","method","url","headers","Authorization","token","params","axios","response","message","Array","isArray","this","request","res","user","get","randomMeRes","randomUser","results","usernmae","userEvaluating","userEvaluated","useTimedMessage","timeInMsec","active","setActive","messageShownRef","useRef","current","setTimeout","ProfileForm","setCurrentUser","lastName","email","saveConfirmed","setSaveConfirmed","profileData","saveProfile","updatedUser","f","SignupForm","signup","PrivateRoute","exact","path","children","MatchCard","src","first","last","city","country","age","draggable","alt","LoadingSpinner","MatchCarousel","isLoading","setIsLoading","setUser","getNewUser","getUserRandomMe","getRandomUser","otherUser","log","d","id","uuid","location","dob","picture","large","userToDisplay","u","last_name","style","textAlign","fontFamily","Routes","register","App","infoLoaded","setInfoLoaded","setToken","signupData","loginData","jwt","decode","getCurrentUser","Provider","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.d352fd82.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\n/** Custom hook for keeping state data synced with localStorage.\r\n *\r\n * This creates `item` as state and look in localStorage for current value\r\n * (if not found, defaults to `firstValue`)\r\n *\r\n * When `item` changes, effect re-runs:\r\n * - if new state is null, removes from localStorage\r\n * - else, updates localStorage\r\n *\r\n * To the component, this just acts like state that is also synced to/from\r\n * localStorage::\r\n *\r\n *   const [thing, setThing] = useLocalStorage(\"thing\")\r\n */\r\n\r\nfunction useLocalStorage(key, firstValue = null) {\r\n  const initialValue = localStorage.getItem(key) || firstValue;\r\n\r\n  const [item, setItem] = useState(initialValue);\r\n\r\n  useEffect(function setKeyInLocalStorage() {\r\n    console.debug(\"hooks useLocalStorage useEffect\", \"item=\", item);\r\n\r\n    if (item === null) {\r\n      localStorage.removeItem(key);\r\n    } else {\r\n      localStorage.setItem(key, item);\r\n    }\r\n  }, [key, item]);\r\n\r\n  return [item, setItem];\r\n}\r\n\r\nexport default useLocalStorage;\r\n","import React from \"react\";\r\n\r\n/** Context: provides currentUser object and setter for it throughout app. */\r\n\r\nconst UserContext = React.createContext();\r\n\r\nexport default UserContext;\r\n","import React, { useContext } from \"react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport UserContext from \"../auth/UserContext\";\r\nimport \"./Navigation.css\";\r\n\r\n/** Navigation bar for site. Shows up on every page.\r\n *\r\n * When user is logged in, shows links to main areas of site. When not,\r\n * shows link to Login and Signup forms.\r\n *\r\n * Rendered by App.\r\n */\r\n\r\nfunction Navigation({ logout }) {\r\n  const { currentUser } = useContext(UserContext);\r\n  console.debug(\"Navigation\", \"currentUser=\", currentUser);\r\n\r\n  function loggedInNav() {\r\n    return (\r\n        <ul className=\"navbar-nav ml-auto\">\r\n          <li className=\"nav-item mr-4\">\r\n            <NavLink className=\"nav-link\" to=\"/match\">\r\n              Match\r\n            </NavLink>\r\n          </li>\r\n          <li className=\"nav-item mr-4\">\r\n            <NavLink className=\"nav-link\" to=\"/profile\">\r\n              Profile\r\n            </NavLink>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <Link className=\"nav-link\" to=\"/\" onClick={logout}>\r\n              Log out \r\n            </Link>\r\n          </li>\r\n        </ul>\r\n    );\r\n  }\r\n\r\n  function loggedOutNav() {\r\n    return (\r\n        <ul className=\"navbar-nav ml-auto\">\r\n          <li className=\"nav-item mr-4\">\r\n            <NavLink className=\"nav-link\" to=\"/login\">\r\n              Login\r\n            </NavLink>\r\n          </li>\r\n          <li className=\"nav-item mr-4\">\r\n            <NavLink className=\"nav-link\" to=\"/signup\">\r\n              Sign Up\r\n            </NavLink>\r\n          </li>\r\n        </ul>\r\n    );\r\n  }\r\n\r\n  return (\r\n      <nav className=\"Navigation navbar navbar-expand-md\">\r\n        <Link className=\"navbar-brand\" to=\"/\">\r\n          Roll Play\r\n        </Link>\r\n        {currentUser ? loggedInNav() : loggedOutNav()}\r\n      </nav>\r\n  );\r\n}\r\n\r\nexport default Navigation;\r\n","import React, { useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Homepage.css\";\r\nimport UserContext from \"../auth/UserContext\";\r\n\r\n/** Homepage of site.\r\n *\r\n * Shows welcome message or login/register buttons.\r\n *\r\n * Routed at /\r\n *\r\n * Routes -> Homepage\r\n */\r\n\r\nfunction Homepage() {\r\n  const { currentUser } = useContext(UserContext);\r\n  console.debug(\"Homepage\", \"currentUser=\", currentUser);\r\n\r\n  return (\r\n      <div className=\"Homepage\">\r\n        <div className=\"container text-center\">\r\n          <h1 className=\"mb-4 font-weight-bold\">Roll Play</h1>\r\n          <p className=\"lead\">Meet gamers on your terms.</p>\r\n          <Link to=\"/match\" className=\"btn btn-primary\">Find Gamers</Link>\r\n          {currentUser\r\n              ? <h2>\r\n                Welcome Back, {currentUser.firstName || currentUser.username}!\r\n              </h2>\r\n              : (\r\n                  <p>\r\n                    <Link className=\"btn btn-primary font-weight-bold mr-3\"\r\n                          to=\"/login\">\r\n                      Log in\r\n                    </Link>\r\n                    <Link className=\"btn btn-primary font-weight-bold\"\r\n                          to=\"/signup\">\r\n                      Sign up\r\n                    </Link>\r\n                  </p>\r\n              )}\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","import React from \"react\";\r\n\r\n/** Presentational component for showing bootstrap-style alerts.\r\n *\r\n * { LoginForm, SignupForm, ProfileForm } -> Alert\r\n **/\r\n\r\nfunction Alert({ type = \"danger\", messages = [] }) {\r\n  console.debug(\"Alert\", \"type=\", type, \"messages=\", messages);\r\n\r\n  return (\r\n      <div className={`alert alert-${type}`} role=\"alert\">\r\n        {messages.map(error => (\r\n            <p className=\"mb-0 small\" key={error}>\r\n              {error}\r\n            </p>\r\n        ))}\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Alert from \"../shared/Alert\";\r\n\r\n/** Login form.\r\n *\r\n * Shows form and manages update to state on changes.\r\n * On submission:\r\n * - calls login function prop\r\n * - redirects to /companies route\r\n *\r\n * Routes -> LoginForm -> Alert\r\n * Routed as /login\r\n */\r\n\r\nfunction LoginForm({ login }) {\r\n  const history = useHistory();\r\n  const [formData, setFormData] = useState({\r\n    username: \"\",\r\n    password: \"\",\r\n  });\r\n  const [formErrors, setFormErrors] = useState([]);\r\n\r\n  console.debug(\r\n      \"LoginForm\",\r\n      \"login=\", typeof login,\r\n      \"formData=\", formData,\r\n      \"formErrors\", formErrors,\r\n  );\r\n\r\n  /** Handle form submit:\r\n   *\r\n   * Calls login func prop and, if successful, redirect to /companies.\r\n   */\r\n\r\n  async function handleSubmit(evt) {\r\n    evt.preventDefault();\r\n    let result = await login(formData);\r\n    if (result.success) {\r\n      history.push(\"/companies\");\r\n    } else {\r\n      setFormErrors(result.errors);\r\n    }\r\n  }\r\n\r\n  /** Update form data field */\r\n  function handleChange(evt) {\r\n    const { name, value } = evt.target;\r\n    setFormData(l => ({ ...l, [name]: value }));\r\n  }\r\n\r\n  return (\r\n      <div className=\"LoginForm\">\r\n        <div className=\"container col-md-6 offset-md-3 col-lg-4 offset-lg-4\">\r\n          <h3 className=\"mb-3\">Log In</h3>\r\n\r\n          <div className=\"card\">\r\n            <div className=\"card-body\">\r\n              <form onSubmit={handleSubmit}>\r\n                <div className=\"form-group\">\r\n                  <label>Username</label>\r\n                  <input\r\n                      name=\"username\"\r\n                      className=\"form-control\"\r\n                      value={formData.username}\r\n                      onChange={handleChange}\r\n                      autoComplete=\"username\"\r\n                      required\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label>Password</label>\r\n                  <input\r\n                      type=\"password\"\r\n                      name=\"password\"\r\n                      className=\"form-control\"\r\n                      value={formData.password}\r\n                      onChange={handleChange}\r\n                      autoComplete=\"current-password\"\r\n                      required\r\n                  />\r\n                </div>\r\n\r\n                {formErrors.length\r\n                    ? <Alert type=\"danger\" messages={formErrors} />\r\n                    : null}\r\n\r\n                <button\r\n                    className=\"btn btn-primary float-right\"\r\n                    onSubmit={handleSubmit}\r\n                >\r\n                  Submit\r\n                </button>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default LoginForm;\r\n","import axios from \"axios\";\r\n\r\nconst RU_API = \"https://randomuser.me/api\";\r\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\r\n\r\n/** API Class.\r\n *\r\n * Static class tying together methods used to get/send to to the API.\r\n *\r\n */\r\n\r\nclass RollplayApi {\r\n  // the token for interacting with the API will be stored here.\r\n  static token;\r\n\r\n  static async request(endpoint, data = {}, method = \"get\") {\r\n    console.debug(\"API Call:\", endpoint, data, method);\r\n\r\n    const url = `${BASE_URL}/${endpoint}`;\r\n    const headers = { Authorization: `Bearer ${RollplayApi.token}` };\r\n    const params = (method === \"get\")\r\n        ? data\r\n        : {};\r\n\r\n    try { \r\n      return (await axios({ url, method, data, params, headers })).data;\r\n    } catch (err) {\r\n      console.error(\"API Error:\", err.response);\r\n      let message = err.response.data.error.message;\r\n      throw Array.isArray(message) ? message : [message];\r\n    }\r\n  }\r\n\r\n  // Individual API routes\r\n\r\n  /** Get the current user. */\r\n\r\n  static async getCurrentUser(username) {\r\n    let res = await this.request(`users/${username}`);\r\n    return res.user;\r\n  }\r\n\r\n  /** returns all of user's matches (evaluation == 'accepted') */\r\n\r\n  static async getUserMatches(username) {\r\n    let res = await this.request(`evaluations/${username}`);\r\n    return res;\r\n  }\r\n\r\n  /** Get random user from randomuser.me API */\r\n  static async getUserRandomMe(){ \r\n    // The information returned can be altered in the params if needed\r\n    let randomMeRes = await axios.get(`${RU_API}/?inc=name,location,dob,login,picture,email,id&results=1`);\r\n    const randomUser = randomMeRes.data.results[0];\r\n\r\n    return randomUser;\r\n  }\r\n\r\n  /** retrieve random user from DB */\r\n\r\n  static async getRandomUser(){\r\n    let res = await axios.get(`users/random`);\r\n\r\n    return res.usernmae;\r\n  }\r\n\r\n  /** Create new match for a user --> args are user viewing profiles and the profile the user is viewing */\r\n\r\n  static async createEvaluation(userEvaluating, userEvaluated) {\r\n    let res = await this.request(`evaluations/create`, {userEvaluating, userEvaluated}, \"post\");\r\n    return res.user;\r\n  }\r\n\r\n  /** get random user from database */\r\n\r\n\r\n\r\n  /** Get token for login from username, password. */\r\n\r\n  static async login(data) {\r\n    let res = await this.request(`auth/token`, data, \"post\");\r\n    return res.token;\r\n  }\r\n\r\n  /** Signup for site. */\r\n\r\n  static async signup(data) {\r\n    let res = await this.request(`auth/register`, data, \"post\");\r\n    return res.token;\r\n  }\r\n\r\n  /** Save user profile page. */\r\n\r\n  static async saveProfile(username, data) {\r\n    let res = await this.request(`users/${username}`, data, \"patch\");\r\n    return res.user;\r\n  }\r\n}\r\n\r\n\r\nexport default RollplayApi;\r\n","import { useRef, useState, useEffect } from \"react\";\r\n\r\n/** Custom hook for managing \"flash\" messages.\r\n *\r\n * This adds an item in state, `active`, which can be controlled by the\r\n * component as desired. The component would typically `setActive(true)`\r\n * to start displaying the message, and after `timeInMsec`, active would\r\n * go back to false, which would typically stop showing the message.\r\n *\r\n * In the component::\r\n *\r\n *   const [myMsgFlag, setMyMsgFlag] = useTimedMessage();\r\n *\r\n *   function somethingDidntWork() {\r\n *     setMsgFlag(true);\r\n *   }\r\n *\r\n *   return (\r\n *     {myMsgFlag ? <p>Oh No!</p> : null}\r\n *   )\r\n *\r\n * While this hook was written for showing flash messages, it's really just\r\n * a hook for timed state clearing -- this same pattern could be useful for\r\n * other tasks.\r\n *\r\n */\r\n\r\nfunction useTimedMessage(timeInMsec = 3000) {\r\n  const [active, setActive] = useState(false);\r\n\r\n  const messageShownRef = useRef(false);\r\n\r\n  useEffect(\r\n      function showSavedMessage() {\r\n        console.debug(\r\n            \"useTimedMessage useEffect showSavedMessage\", \"active=\", active);\r\n\r\n        if (active && !messageShownRef.current) {\r\n          messageShownRef.current = true;\r\n          setTimeout(function removeMessage() {\r\n            setActive(false);\r\n            messageShownRef.current = false;\r\n          }, timeInMsec);\r\n        }\r\n      },\r\n      [active, timeInMsec],\r\n  );\r\n\r\n  return [active, setActive];\r\n}\r\n\r\nexport default useTimedMessage;\r\n","import React, { useState, useContext } from \"react\";\r\nimport Alert from \"../shared/Alert\";\r\nimport RollplayApi from \"../api/api\";\r\nimport UserContext from \"../auth/UserContext\";\r\n\r\n// eslint-disable-next-line\r\nimport useTimedMessage from \"../hooks/useTimedMessage\";\r\n\r\n/** Profile editing form.\r\n *\r\n * Displays profile form and handles changes to local form state.\r\n * Submitting the form calls the API to save, and triggers user reloading\r\n * throughout the site.\r\n *\r\n * Confirmation of a successful save is normally a simple <Alert>, but\r\n * you can opt-in to our fancy limited-time-display message hook,\r\n * `useTimedMessage`, but switching the lines below.\r\n *\r\n * Routed as /profile\r\n * Routes -> ProfileForm -> Alert\r\n */\r\n\r\nfunction ProfileForm() {\r\n  const { currentUser, setCurrentUser } = useContext(UserContext);\r\n  const [formData, setFormData] = useState({\r\n    firstName: currentUser.firstName,\r\n    lastName: currentUser.lastName,\r\n    email: currentUser.email,\r\n    username: currentUser.username,\r\n    password: \"\",\r\n  });\r\n  const [formErrors, setFormErrors] = useState([]);\r\n\r\n  // const [saveConfirmed, setSaveConfirmed] = useState(false);\r\n  // switch to use our fancy limited-time-display message hook\r\n  const [saveConfirmed, setSaveConfirmed] = useTimedMessage();\r\n\r\n  console.debug(\r\n      \"ProfileForm\",\r\n      \"currentUser=\", currentUser,\r\n      \"formData=\", formData,\r\n      \"formErrors=\", formErrors,\r\n      \"saveConfirmed=\", saveConfirmed,\r\n  );\r\n\r\n  /** on form submit:\r\n   * - attempt save to backend & report any errors\r\n   * - if successful\r\n   *   - clear previous error messages and password\r\n   *   - show save-confirmed message\r\n   *   - set current user info throughout the site\r\n   */\r\n\r\n  async function handleSubmit(evt) {\r\n    evt.preventDefault();\r\n\r\n    let profileData = {\r\n      firstName: formData.firstName,\r\n      lastName: formData.lastName,\r\n      email: formData.email,\r\n      password: formData.password,\r\n    };\r\n\r\n    let username = formData.username;\r\n    let updatedUser;\r\n\r\n    try {\r\n      updatedUser = await RollplayApi.saveProfile(username, profileData);\r\n    } catch (errors) {\r\n      setFormErrors(errors);\r\n      console.debug(errors);\r\n      return;\r\n    }\r\n\r\n    setFormData(f => ({ ...f, password: \"\" }));\r\n    setFormErrors([]);\r\n    setSaveConfirmed(true);\r\n\r\n    // trigger reloading of user information throughout the site\r\n    setCurrentUser(updatedUser);\r\n  }\r\n\r\n  /** Handle form data changing */\r\n  function handleChange(evt) {\r\n    const { name, value } = evt.target;\r\n    setFormData(f => ({\r\n      ...f,\r\n      [name]: value,\r\n    }));\r\n    setFormErrors([]);\r\n  }\r\n\r\n  return (\r\n      <div className=\"col-md-6 col-lg-4 offset-md-3 offset-lg-4\">\r\n        <h3>Profile</h3>\r\n        <div className=\"card\">\r\n          <div className=\"card-body\">\r\n            <form>\r\n              <div className=\"form-group\">\r\n                <label>Username</label>\r\n                <p className=\"form-control-plaintext\">{formData.username}</p>\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label>First Name</label>\r\n                <input\r\n                    name=\"firstName\"\r\n                    className=\"form-control\"\r\n                    value={formData.firstName}\r\n                    onChange={handleChange}\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label>Last Name</label>\r\n                <input\r\n                    name=\"lastName\"\r\n                    className=\"form-control\"\r\n                    value={formData.lastName}\r\n                    onChange={handleChange}\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label>Email</label>\r\n                <input\r\n                    name=\"email\"\r\n                    className=\"form-control\"\r\n                    value={formData.email}\r\n                    onChange={handleChange}\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label>Confirm password to make changes:</label>\r\n                <input\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    className=\"form-control\"\r\n                    value={formData.password}\r\n                    onChange={handleChange}\r\n                />\r\n              </div>\r\n\r\n              {formErrors.length ? <Alert type=\"danger\" messages={formErrors} /> : null}\r\n\r\n              {saveConfirmed ? <Alert type=\"success\" messages={[\"Updated successfully.\"]} /> : null}\r\n\r\n              <button\r\n                  className=\"btn btn-primary btn-block mt-4\"\r\n                  onClick={handleSubmit}\r\n              >\r\n                Save Changes\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default ProfileForm;\r\n","import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Alert from \"../shared/Alert\";\r\n\r\n/** Signup form.\r\n *\r\n * Shows form and manages update to state on changes.\r\n * On submission:\r\n * - calls signup function prop\r\n * - redirects to /companies route\r\n *\r\n * Routes -> SignupForm -> Alert\r\n * Routed as /signup\r\n */\r\n\r\nfunction SignupForm({ signup }) {\r\n  const history = useHistory();\r\n  const [formData, setFormData] = useState({\r\n    username: \"\",\r\n    password: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    email: \"\",\r\n  });\r\n  const [formErrors, setFormErrors] = useState([]);\r\n\r\n  console.debug(\r\n      \"SignupForm\",\r\n      \"signup=\", typeof signup,\r\n      \"formData=\", formData,\r\n      \"formErrors=\", formErrors,\r\n  );\r\n\r\n  /** Handle form submit:\r\n   *\r\n   * Calls login func prop and, if successful, redirect to /companies.\r\n   */\r\n\r\n  async function handleSubmit(evt) {\r\n    evt.preventDefault();\r\n    let result = await signup(formData);\r\n    if (result.success) {\r\n      history.push(\"/companies\");\r\n    } else {\r\n      setFormErrors(result.errors);\r\n    }\r\n  }\r\n\r\n  /** Update form data field */\r\n  function handleChange(evt) {\r\n    const { name, value } = evt.target;\r\n    setFormData(data => ({ ...data, [name]: value }));\r\n  }\r\n\r\n  return (\r\n      <div className=\"SignupForm\">\r\n        <div className=\"container col-md-6 offset-md-3 col-lg-4 offset-lg-4\">\r\n          <h2 className=\"mb-3\">Sign Up</h2>\r\n          <div className=\"card\">\r\n            <div className=\"card-body\">\r\n              <form onSubmit={handleSubmit}>\r\n                <div className=\"form-group\">\r\n                  <label>Username</label>\r\n                  <input\r\n                      name=\"username\"\r\n                      className=\"form-control\"\r\n                      value={formData.username}\r\n                      onChange={handleChange}\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label>Password</label>\r\n                  <input\r\n                      type=\"password\"\r\n                      name=\"password\"\r\n                      className=\"form-control\"\r\n                      value={formData.password}\r\n                      autoComplete=\"new-password\"\r\n                      onChange={handleChange}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <label>First name</label>\r\n                  <input\r\n                      name=\"firstName\"\r\n                      className=\"form-control\"\r\n                      value={formData.firstName}\r\n                      onChange={handleChange}\r\n                      autoComplete=\"given-name\"\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label>Last name</label>\r\n                  <input\r\n                      name=\"lastName\"\r\n                      className=\"form-control\"\r\n                      value={formData.lastName}\r\n                      onChange={handleChange}\r\n                      autoComplete=\"family-name\"\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label>Email</label>\r\n                  <input\r\n                      type=\"email\"\r\n                      name=\"email\"\r\n                      className=\"form-control\"\r\n                      value={formData.email}\r\n                      onChange={handleChange}\r\n                      autoComplete=\"email\"\r\n                  />\r\n                </div>\r\n\r\n                {formErrors.length\r\n                    ? <Alert type=\"danger\" messages={formErrors} />\r\n                    : null\r\n                }\r\n\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"btn btn-primary float-right\"\r\n                    onSubmit={handleSubmit}\r\n                >\r\n                  Submit\r\n                </button>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default SignupForm;","import React, { useContext } from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport UserContext from \"../auth/UserContext\";\r\n\r\n/** \"Higher-Order Component\" for private routes.\r\n *\r\n * In routing component, use these instead of <Route ...>. This component\r\n * will check if there is a valid current user and only continues to the\r\n * route if so. If no user is present, redirects to login form.\r\n */\r\n\r\nfunction PrivateRoute({ exact, path, children }) {\r\n  const { currentUser } = useContext(UserContext);\r\n\r\n  console.debug(\r\n      \"PrivateRoute\",\r\n      \"exact=\", exact,\r\n      \"path=\", path,\r\n      \"currentUser=\", currentUser,\r\n  );\r\n\r\n  if (!currentUser) {\r\n    return <Redirect to=\"/login\" />;\r\n  }\r\n\r\n  return (\r\n      <Route exact={exact} path={path}>\r\n        {children}\r\n      </Route>\r\n  );\r\n}\r\n\r\nexport default PrivateRoute;\r\n","import React from \"react\";\r\nimport \"./MatchCard.css\";\r\n/** component that displays user profile information to inform matching system */ \r\n\r\nfunction MatchCard ({src, first, last, city, country, age}) {\r\n    return (\r\n    <div className=\"flip-container\">\r\n        <div className=\"flip-card\" draggable=\"true\">\r\n            <div className=\"flip-card-inner\">\r\n              <div className=\"flip-card-front\">\r\n                <img className=\"flip-image\" src={src} alt=\"\" />\r\n              </div>\r\n              <div className=\"flip-card-back\">\r\n                <h1 className=\"flip-text\">{first} {last}</h1>\r\n                <p className=\"flip-text\">City: {city}</p>\r\n                <p className=\"flip-text\">Country: {country}</p>\r\n                <p className=\"flip-text\">Age: {age}</p>\r\n              </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default MatchCard; ","import React from \"react\";\r\nimport \"./LoadingSpinner.css\";\r\n\r\n/** Loading message used by components that fetch API data. */\r\n\r\nfunction LoadingSpinner() {\r\n  return (\r\n      <div className=\"loader\"></div>\r\n  );\r\n}\r\n\r\nexport default LoadingSpinner;","import React, {useState, useEffect} from \"react\";\r\nimport MatchCard from \"./MatchCard\";\r\nimport LoadingSpinner from \"../shared/LoadingSpinner\";\r\n\r\nimport RollplayApi from \"../api/api\";\r\n\r\nimport \"./MatchCarousel.css\";\r\n\r\nfunction MatchCarousel() {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isMatch, setIsMatch] = useState(false);\r\n  const [user, setUser] = useState([]);\r\n\r\n  /** Generates new user from randomuser.me API */\r\n\r\n  async function getNewUser() {\r\n    try {\r\n      setIsLoading(true);\r\n\r\n      let randomUser = await RollplayApi.getUserRandomMe();\r\n      let otherUser = await RollplayApi.getRandomUser(); \r\n      console.log(otherUser);\r\n      //trigger re-render\r\n      setUser([]);\r\n\r\n      setUser(d => [\r\n        ...d,\r\n        {\r\n          id: randomUser.login.uuid,\r\n          username: randomUser.login.username,\r\n          password: randomUser.login.password,\r\n          first: randomUser.name.first,\r\n          last: randomUser.name.last,\r\n          city: randomUser.location.city,\r\n          country: randomUser.location.country,\r\n          email: randomUser.email,\r\n          age: randomUser.dob.age,\r\n          src: randomUser.picture.large\r\n        }\r\n      ]);\r\n      setIsLoading(false);\r\n    } catch(err){\r\n      console.debug(err);\r\n    }\r\n  }\r\n\r\n  // async function getNewUser(){\r\n  //   try{\r\n  //     setIsLoading(true);\r\n      \r\n  //     // generates a random id to query db for next possible match  \r\n  //     let randomUser = await RollplayApi.getRandomUser();\r\n  //     console.log(randomUser); \r\n  //     setIsLoading(false);\r\n  //     //trigger re-render\r\n  //     // setUser([]);\r\n\r\n  //     // setUser(d => [\r\n  //     //   ...d,\r\n  //     //   {\r\n  //     //     id: randomUser.login.uuid,\r\n  //     //     username: randomUser.login.username,\r\n  //     //     password: randomUser.login.password,\r\n  //     //     first: randomUser.name.first,\r\n  //     //     last: randomUser.name.last,\r\n  //     //     city: randomUser.location.city,\r\n  //     //     country: randomUser.location.country,\r\n  //     //     email: randomUser.email,\r\n  //     //     age: randomUser.dob.age,\r\n  //     //     src: randomUser.picture.large\r\n  //     //   }\r\n  //     // ]);\r\n    \r\n  //   } catch(err) {\r\n  //     console.debug(err);\r\n  //   }\r\n  // }\r\n\r\n  // useEffect(() => { \r\n    \r\n  // }, [setUser]);\r\n\r\n  const skipUser = () => {\r\n    getNewUser();\r\n  }\r\n  const matchUser = () => {\r\n    getNewUser();\r\n  };\r\n\r\n  const userToDisplay = user.map(u => (\r\n    <MatchCard key={u.id} \r\n          first={u.first} \r\n          last={u.last_name} \r\n          city={u.city}\r\n          country={u.country}\r\n          age={u.age}\r\n          src={u.src} />\r\n  ));\r\n  \r\n    return (\r\n      <>\r\n        {isLoading ? \r\n        <div className=\"container text-center\">\r\n          <div className=\"lead\">Not loading? Try refreshing the page</div>\r\n          <LoadingSpinner/>\r\n        </div>\r\n         : \r\n        <div style={{textAlign: \"center\", fontFamily: \"Lucida Sans\"}}>\r\n        Tap/hover to learn more\r\n        {userToDisplay}\r\n          <div>\r\n            <img src={user.src}/>\r\n            <button className=\"skipBtn btn btn-danger\" onClick={skipUser}>Skip</button>\r\n            <button className=\"matchBtn btn btn-success\" onClick={matchUser}>Match</button> \r\n          </div>\r\n        </div>\r\n        }\r\n      </>\r\n    );\r\n}\r\n\r\nexport default MatchCarousel;\r\n","import React from \"react\";\r\nimport { Switch, Route, Redirect } from \"react-router-dom\";\r\nimport Homepage from \"../homepage/Homepage\";\r\nimport LoginForm from \"../auth/LoginForm\";\r\nimport ProfileForm from \"../profiles/ProfileForm\";\r\nimport SignupForm from \"../auth/SignupForm\";\r\nimport PrivateRoute from \"./PrivateRoute\";\r\nimport MatchCarousel from \"../match/MatchCarousel\";\r\n\r\n/** Site-wide routes.\r\n *\r\n * Parts of site should only be visitable when logged in. Those routes are\r\n * wrapped by <PrivateRoute>, which is an authorization component.\r\n *\r\n * Visiting a non-existant route redirects to the homepage.\r\n */\r\n\r\nfunction Routes({ login, signup }) {\r\n  console.debug(\r\n      \"Routes\",\r\n      `login=${typeof login}`,\r\n      `register=${typeof register}`,\r\n  );\r\n\r\n  return (\r\n      <div className=\"pt-5\">\r\n        <Switch>\r\n\r\n          <Route exact path=\"/\">\r\n            <Homepage />\r\n          </Route>\r\n\r\n          <Route exact path=\"/login\">\r\n            <LoginForm login={login} />\r\n          </Route>\r\n\r\n          <Route exact path=\"/signup\">\r\n            <SignupForm signup={signup} />\r\n          </Route>\r\n\r\n          <Route exact path=\"/match\">\r\n            <MatchCarousel />\r\n          </Route>\r\n\r\n          <PrivateRoute path=\"/profile\">\r\n            <ProfileForm />\r\n          </PrivateRoute>\r\n\r\n          <Redirect to=\"/\" />\r\n        </Switch>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Routes;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport useLocalStorage from \"./hooks/useLocalStorage\";\r\nimport Navigation from \"./routes-nav/Navigation\";\r\nimport Routes from \"./routes-nav/Routes\";\r\nimport LoadingSpinner from \"./shared/LoadingSpinner\";\r\nimport RollplayApi from \"./api/api\";\r\nimport UserContext from \"./auth/UserContext\";\r\nimport jwt from \"jsonwebtoken\";\r\n\r\n// Key name for storing token in localStorage for \"remember me\" re-login\r\nexport const TOKEN_STORAGE_ID = \"rollplay-token\";\r\n\r\n/** Rollplay application.\r\n *\r\n * - currentUser: user obj from API. Is user logged in? Preserved through context.\r\n *\r\n * - token: for logged in users, JWT.\r\n *   Is required to be set for most API calls. This is initially read from\r\n *   localStorage and synced to there via the useLocalStorage hook.\r\n * \r\n */\r\n\r\n\r\nfunction App() {\r\n  const [infoLoaded, setInfoLoaded] = useState(false);\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [token, setToken] = useLocalStorage(TOKEN_STORAGE_ID);\r\n\r\n  console.debug(\r\n      \"App\",\r\n      \"infoLoaded=\", infoLoaded,\r\n      \"currentUser=\", currentUser,\r\n      \"token=\", token,\r\n  );\r\n\r\n  // Load user info from API. Until a user is logged in and they have a token,\r\n  // this should not run. It only needs to re-run when a user logs out, so\r\n  // the value of the token is a dependency for this effect.\r\n\r\n  useEffect(function loadUserInfo() {\r\n    console.debug(\"App useEffect loadUserInfo\", \"token=\", token);\r\n\r\n    async function getCurrentUser() {\r\n      if (token) {\r\n        try {\r\n          let { username } = jwt.decode(token);\r\n          // put the token on the Api class so it can use it to call the API.\r\n          RollplayApi.token = token;\r\n          let currentUser = await RollplayApi.getCurrentUser(username);\r\n          setCurrentUser(currentUser);\r\n        } catch (err) {\r\n          console.error(\"App loadUserInfo: problem loading\", err);\r\n          setCurrentUser(null);\r\n        }\r\n      }\r\n      setInfoLoaded(true);\r\n    }\r\n\r\n    // set infoLoaded to false while async getCurrentUser runs; once the\r\n    // data is fetched, this will be set back\r\n    // to false to control the spinner.\r\n    setInfoLoaded(false);\r\n    getCurrentUser();\r\n  }, [token]);\r\n\r\n  /** Handles site-wide logout. */\r\n  function logout() {\r\n    setCurrentUser(null);\r\n    setToken(null);\r\n  }\r\n\r\n  /** Handles site-wide signup.\r\n   *\r\n   * Automatically logs them in (set token) upon signup.\r\n   *\r\n   * Make sure you await this function and check its return value!\r\n   */\r\n  async function signup(signupData) {\r\n    try {\r\n      let token = await RollplayApi.signup(signupData);\r\n      setToken(token);\r\n      return { success: true };\r\n    } catch (errors) {\r\n      console.error(\"signup failed\", errors);\r\n      return { success: false, errors };\r\n    }\r\n  }\r\n\r\n  /** Handles site-wide login. */\r\n  async function login(loginData) {\r\n    try {\r\n      let token = await RollplayApi.login(loginData);\r\n      setToken(token);\r\n      return { success: true };\r\n    } catch (errors) {\r\n      console.error(\"login failed\", errors);\r\n      return { success: false, errors };\r\n    }\r\n  }\r\n\r\n  if (!infoLoaded) return <LoadingSpinner />;\r\n\r\n  return (\r\n      <BrowserRouter>\r\n        <UserContext.Provider\r\n            value={{ currentUser, setCurrentUser}}>\r\n          <div className=\"App\">\r\n            <Navigation logout={logout} />\r\n            <Routes login={login} signup={signup} />\r\n          </div>\r\n        </UserContext.Provider>\r\n      </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n    ),\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n              \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === \"installed\") {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                    \"New content is available and will be used when all \" +\r\n                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\r\n                );\r\n\r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log(\"Content is cached for offline use.\");\r\n\r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error(\"Error during service worker registration:\", error);\r\n      });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get(\"content-type\");\r\n        if (\r\n            response.status === 404 ||\r\n            (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n            \"No internet connection found. App is running in offline mode.\",\r\n        );\r\n      });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}